@page "/"

@using Notes.WebUI.Models
@using Notes.WebUI.Interfaces
@inject INoteService noteService

<Navbar OnNoteAdded="HandleNoteChange" NoteCount="noteCount" OnSearch="HandleSearch" />

@if (showUpdNoteForm)
{
    <div class="container mt-3">
        <h4>Оновлення нотатки</h4>
        <input @bind="titleUpd" placeholder="Заголовок" class="form-control mb-2" />
        <input @bind="textUpd" placeholder="Текст нотатки" class="form-control mb-2" />
        <button @onclick="UpdateNote" class="btn btn-primary">Зберегти</button>
        <button @onclick="Discard" class="btn btn-danger">Відмінити</button>
    </div>
}

@if (notes != null && notes.Any())
{
    @foreach (var note in notes)
    {
        <div class="note-block" style="border: 5px solid #96999a; background-color: #96999a; margin-top: 10px; border-radius: 10px;">
            <div class="note-header" style="display: flex; align-items: center;">
                <h5 style="margin-right: 100px; margin-left: 30px">@note.Title</h5>
                <p>@TimeAgo(note.CreateDate)</p>
                <button @onclick="() => ExpandNote(note)" class="btn btn-primary btn-sm" style="margin-left: auto;">Переглянути</button>
                <button @onclick="() => DeleteNote(note.Id)" class="btn btn-danger btn-sm">Видалити</button>
                <button @onclick="() => ShowUpdateForm(note.Id, note.Title, note.Text)" class="btn btn-primary btn-sm">Відредагувати</button>
            </div>

            @if (expandedStates.ContainsKey(note.Id) && expandedStates[note.Id])
            {
                <div style="margin: 7px; padding: 7px; background-color: white; border-radius: 10px;" class="note-text">
                    <p>@note.Text</p>
                </div>
            }
        </div>
    }
}

@code {
    private IEnumerable<NotesModel> allNotes;
    private IEnumerable<NotesModel> notes;
    private Dictionary<Guid, bool> expandedStates = new Dictionary<Guid, bool>();
    private int noteCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotes();
    }

    private async Task LoadNotes()
    {
        allNotes = await noteService.GetNotes();
        allNotes = allNotes.OrderByDescending(n => n.CreateDate);
        notes = allNotes;
        noteCount = notes.Count();
    }

    private async Task HandleNoteChange()
    {
        await LoadNotes();
    }

    private async Task HandleSearch(string query)
    {
        if (string.IsNullOrWhiteSpace(query))
        {
            notes = allNotes;
            noteCount = notes.Count();
        }
        else
        {
            notes = allNotes.Where(n => n.Title.Contains(query, StringComparison.OrdinalIgnoreCase) || n.Text.Contains(query, StringComparison.OrdinalIgnoreCase));
            noteCount = notes.Count();
        }
    }

    private void ExpandNote(NotesModel note)
    {
        if (expandedStates.ContainsKey(note.Id))
        {
            expandedStates[note.Id] = !expandedStates[note.Id];
        }
        else
        {
            expandedStates.Add(note.Id, true);
        }
    }

    private async Task DeleteNote(Guid id)
    {
        await noteService.DeleteNote(id);
        await HandleNoteChange();
    }

    private bool showUpdNoteForm = false;
    private Guid Id;
    private string titleUpd;
    private string textUpd;

    private async Task ShowUpdateForm(Guid id, string title, string text)
    {
        showUpdNoteForm = true;
        Id = id;
        titleUpd = title;
        textUpd = text;
    }

    private async Task Discard()
    {
        showUpdNoteForm = false;
        titleUpd = string.Empty;
        textUpd = string.Empty;
    }

    private async Task UpdateNote()
    {
        showUpdNoteForm = false;
        await noteService.UpdateNote(Id,titleUpd, textUpd);
        await HandleNoteChange();
        titleUpd = string.Empty;
        textUpd = string.Empty;
    }
}

@code{
    // Коли була створенна нотатка
    private string TimeAgo(DateTime date)
    {
        var timeDifference = DateTime.Now - date;
        string timeAgo;
        if (timeDifference.TotalMinutes < 60)
        {
            timeAgo = $"{(int)timeDifference.TotalMinutes} хвилин назад";
        }
        else if (timeDifference.TotalHours < 24)
        {
            timeAgo = $"{(int)timeDifference.TotalHours} годин назад";
        }
        else
        {
            timeAgo = $"{(int)timeDifference.TotalDays} днів назад";
        }

        return timeAgo;
    }
}